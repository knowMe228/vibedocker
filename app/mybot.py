import asyncio
import logging
import mysql.connector
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode

API_TOKEN = '5370836512:AAGYIQmlyaHRrdZ3kmUHTqfsaWXLnDjrZJo'  # üîê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

sessions = {}

QUOTES = [
    "–î–µ–π—Å—Ç–≤—É–π! –î–∞–∂–µ –µ—Å–ª–∏ —Å—Ç—Ä–∞—à–Ω–æ.",
    "–¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è ‚Äî —è –≤–µ—Ä—é.",
    "–û–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –∑–∞ —Ä–∞–∑!",
    "–ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ ‚Äî —Ç–æ–∂–µ –¥–≤–∏–∂–µ–Ω–∏–µ.",
]

# DB —Ñ—É–Ω–∫—Ü–∏–∏
def db_conn():
    return mysql.connector.connect(
        host='db',
        user='root',
        password='root',
        database='lab1'
    )

def get_tasks():
    conn = db_conn()
    cursor = conn.cursor()
    cursor.execute("SELECT id, text FROM items")
    tasks = cursor.fetchall()
    conn.close()
    return tasks

def add_task(text):
    conn = db_conn()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO items (text) VALUES (%s)", (text,))
    conn.commit()
    conn.close()

def delete_task(task_id):
    conn = db_conn()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM items WHERE id = %s", (task_id,))
    conn.commit()
    conn.close()

def update_task(task_id, new_text):
    conn = db_conn()
    cursor = conn.cursor()
    cursor.execute("UPDATE items SET text = %s WHERE id = %s", (new_text, task_id))
    conn.commit()
    conn.close()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"), KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")],
            [KeyboardButton(text="üí¨ –¶–∏—Ç–∞—Ç–∞"), KeyboardButton(text="üì§ –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–ø–∏—Å–æ–∫")]
        ],
        resize_keyboard=True
    )

# /start
@dp.message(CommandStart())
async def start(message: types.Message):
    sessions[message.chat.id] = {"step": "login"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")

# /quote
@dp.message(Command("quote"))
async def quote(message: types.Message):
    await message.answer(random.choice(QUOTES))

# /add (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∫–Ω–æ–ø–∫–µ)
@dp.message(Command("add"))
async def add(message: types.Message):
    chat_id = message.chat.id
    session = sessions.get(chat_id, {})
    if not session.get("authenticated"):
        await message.answer("‚õî –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
    session["step"] = "add_task"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")

# /forward
@dp.message(Command("forward"))
async def forward(message: types.Message):
    chat_id = message.chat.id
    session = sessions.get(chat_id, {})
    if not session.get("authenticated"):
        await message.answer("‚õî –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /forward <user_id>")
        return
    user_id = int(args[1])
    tasks = get_tasks()
    text = "\n".join([f"{t[0]}: {t[1]}" for t in tasks])
    try:
        await bot.send_message(chat_id=user_id, text=f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n{text}")
        await message.answer("‚úÖ –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def handle_text(message: types.Message):
    chat_id = message.chat.id
    session = sessions.get(chat_id, {})

    # ‚õî –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not session.get("authenticated") and session.get("step") not in ["login", "password"]:
        await message.answer("‚õî –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if session.get("step") == "login":
        session["login"] = message.text.strip()
        session["step"] = "password"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        return

    if session.get("step") == "password":
        session["password"] = message.text.strip()
        if session["login"] == "admin" and session["password"] == "admin":
            session["authenticated"] = True
            session["step"] = "choose_task"
            await message.answer("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!", reply_markup=get_main_menu())
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start")
            sessions.pop(chat_id, None)
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    if session.get("step") == "add_task":
        task_text = message.text.strip()
        add_task(task_text)
        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_main_menu())
        session["step"] = "choose_task"
        return

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    if session.get("step") == "edit_task":
        task_id = session.get("edit_id")
        update_task(task_id, message.text.strip())
        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=get_main_menu())
        session["step"] = "choose_task"
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if message.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á":
        await show_tasks_menu(message)
    elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        session["step"] = "add_task"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")
    elif message.text == "üí¨ –¶–∏—Ç–∞—Ç–∞":
        await message.answer(random.choice(QUOTES))
    elif message.text == "üì§ –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–ø–∏—Å–æ–∫":
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /forward <user_id>")

# Callback-–∫–Ω–æ–ø–∫–∏ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ)
@dp.callback_query()
async def task_chosen(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    session = sessions.get(chat_id, {})

    # ‚õî –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not session.get("authenticated"):
        await callback.message.answer("‚õî –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return

    data = callback.data

    if data.startswith("delete_"):
        task_id = int(data.split("_")[1])
        delete_task(task_id)
        await callback.message.answer("üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")
        await show_tasks_menu(callback.message)
    elif data.startswith("edit_"):
        task_id = int(data.split("_")[1])
        session["step"] = "edit_task"
        session["edit_id"] = task_id
        await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")

# –ü–æ–∫–∞–∑ –∑–∞–¥–∞—á —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def show_tasks_menu(message):
    chat_id = message.chat.id
    session = sessions.get(chat_id, {})

    # ‚õî –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not session.get("authenticated"):
        await message.answer("‚õî –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return

    session["step"] = "choose_task"
    tasks = get_tasks()
    if not tasks:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
        return

    for task_id, text in tasks:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{task_id}"),
                    InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task_id}")
                ]
            ]
        )
        await message.answer(f"<b>{text}</b>", reply_markup=keyboard, parse_mode=ParseMode.HTML)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))
